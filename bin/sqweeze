#! /usr/bin/env ruby

%w[rubygems yui/compressor closure-compiler hpricot].each{|lib| require lib}
%w[ singleton yaml base64 open-uri pathname optparse].each{|lib| require lib}

$:.unshift File.dirname(__FILE__)

%w[lib/sqweezeUtils lib/confManager lib/compressor lib/domCompiler
   lib/compressors/cssCompressor lib/compressors/jsCompressor lib/compressors/gifCompressor lib/compressors/pngCompressor lib/compressors/jpegCompressor 
   lib/compilers/cssDomCompiler lib/compilers/jsDomCompiler lib/compilers/assetLinker
].each{|lib| require lib}

options = {}
op=OptionParser.new do |opts|

  opts.banner = "Usage: sqweeze [options] SOURCE_DIR [TARGET_DIR]"
  opts.program_name= 'sqweeze'
  opts.on("-s", "--optimisation-strategy=ALL_IN_ONE",
          "JavaScript/CSS optimisation strategy to be adopted ") do |s|
    raise OptionParser::InvalidArgument unless ['all_inline','all_in_one'].include?(s)
    options[:optimisation_strategy] = s.downcase.to_sym
  end

  opts.separator ""
  opts.separator "File Selection:"  
  opts.on('-i','--include-files=PATTERN', "Include a file/directory pattern (e.g. images/**/*.png  ) ") do |inc|
    options[:include_files] = inc
  end
  opts.on('-e','--exclude-files=PATTERN', "Exclude a file/directory pattern (e.g. doc/**/*.* )") do |exc|
    options[:exclude_files] = exc
  end
  opts.on('-d','--dom-documents=PATTERN', "Dom document/s to which CSS/JS  should be linked (e.g. **/index.html )") do |dom|
    options[:dom_documents] = dom
  end  

  opts.separator ""
  opts.separator "Image Compression:"
  opts.on("--[no-]png", "do/do-not use the PNG Compressor ") do |png|  
    options[:compress_png] = png
  end
  opts.on("--[no-]jpeg", "do/do-not use the Jpeg Compressor ") do |jpeg|  
    options[:compress_jpeg] = jpeg
  end
  opts.on("--[no-]gif", "do/do-not use the GIF Compressor ") do |gif|  
    options[:compress_gif] = gif
  end
  opts.separator ""
  opts.separator "Stylesheets:"
  
  opts.on("--[no-]css", "do/do-not use the CSS Compressor ") do |css|  
    options[:compress_css] = css
  end
  opts.on("-m","--mhtml-root=[ABSOLUTE_URL]", 'An absolute url pointing at the project stylesheets directory on the web') do |mr|
    # raise OptionParser::InvalidArgument unless URI(mr).absolute?
    options[:mhtml_root] = mr
  end
  opts.separator ""
  opts.separator "JavaScript:"
  
  opts.on("--[no-]js", "do/do-not use the JS Compressor ") do |js|  
    options[:compress_js] = js
  end
  opts.on('-a','--append_scripts_to=HEAD', "Append script elements to the HEAD or the BODY of the document") do |elm|
    options[:append_scripts_to] = elm
  end  
  opts.on("-j","--default-js-compressor=YUI", "Default JavaScript compressor ") do |j|
    raise OptionParser::InvalidArgument unless ['yui','closure'].include?(j.downcase)
    options[:default_js_compressor] = j.downcase.to_sym
  end

end

begin 
  op.parse!
  Proc.new { puts "Missing SOURCE_DIR argument"; exit(1) }.call unless ARGV[0]
  Proc.new { puts "source directory #{ARGV[0]} does not exist, please provide a valid path"
             exit(1) }.call unless File.exists?(ARGV[0])
  
  cm=ConfManager.instance
  cm.prepare(ARGV[0], ARGV[1], options)
   
  # Compress images  
  { :compress_png => PngCompressor.new, 
    :compress_gif => GifCompressor.new,
    :compress_jpeg => JpegCompressor.new   
  }.each do |opt, cmp|
       cmp.compress unless cm.get_conf(opt) == false
  end
  
  case cm.get_conf(:optimisation_strategy)
    when :all_inline
     puts "do the all in line thing.."

    when :all_in_one 
      { :compress_js => JsCompressor.new, 
        :compress_css => CssCompressor.new
      }.each do |opt, cmp|
         cmp.compress unless cm.get_conf(opt) == false
      end
      # link assets to main HTML file
      AssetLinker.new.compile unless cm.get_conf(:dom_documents).empty?
  end
end
